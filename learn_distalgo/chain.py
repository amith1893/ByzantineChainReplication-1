# -*- generated by 1.0.12 -*-
import da
PatternExpr_218 = da.pat.TuplePattern([da.pat.ConstantPattern('newm'), da.pat.FreePattern('action')])
PatternExpr_225 = da.pat.FreePattern('sender')
PatternExpr_251 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('id')])
PatternExpr_316 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('id')])
PatternExpr_389 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('id')])
PatternExpr_395 = da.pat.FreePattern('sender')
PatternExpr_462 = da.pat.TuplePattern([da.pat.ConstantPattern('result'), da.pat.FreePattern('res'), da.pat.FreePattern('p')])
PatternExpr_499 = da.pat.TuplePattern([da.pat.ConstantPattern('result'), da.pat.FreePattern('res'), da.pat.FreePattern('p')])
PatternExpr_508 = da.pat.FreePattern('sender')
PatternExpr_656 = da.pat.TuplePattern([da.pat.ConstantPattern('Done')])
PatternExpr_661 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Done')])])
_config_object = {}
import time

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_1 = []
        self._ReplicaReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_218, sources=[PatternExpr_225], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_217]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_251, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_316, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_389, sources=[PatternExpr_395], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_388])])

    def setup(self, neighbours, client, name, **rest_674):
        super().setup(neighbours=neighbours, client=client, name=name, **rest_674)
        self._state.neighbours = neighbours
        self._state.client = client
        self._state.name = name
        self._state.predecessor = self._state.neighbours[0]
        self._state.successor = self._state.neighbours[1]
        self._state.name = self._state.name
        self._state.history = []
        self._state.client = self._state.client
        self._state.terminate = 0

    def run(self):
        super()._label('_st_label_208', block=False)
        _st_label_208 = 0
        while (_st_label_208 == 0):
            _st_label_208 += 1
            if (self._state.terminate == (- 1)):
                _st_label_208 += 1
            else:
                super()._label('_st_label_208', block=True)
                _st_label_208 -= 1

    def evaluate(self, action):
        op = action.split()
        self._state.history.append((int(op[1]) + int(op[2])))

    def _Replica_handler_217(self, action, sender):
        if (self._state.name == 'replica'):
            self.evaluate(action)
            self.send(('newm', action), to=self._state.successor)
            super()._label('_st_label_248', block=False)
            id = None

            def ExistentialOpExpr_249():
                nonlocal id
                for (_, _, (_ConstantPattern265_, id)) in self._ReplicaReceivedEvent_1:
                    if (_ConstantPattern265_ == 'ack'):
                        if (id == self._state.successor):
                            return True
                return False
            _st_label_248 = 0
            while (_st_label_248 == 0):
                _st_label_248 += 1
                if ExistentialOpExpr_249():
                    _st_label_248 += 1
                else:
                    super()._label('_st_label_248', block=True)
                    _st_label_248 -= 1
            self.output('Received ACK from ', self._state.successor, ' will send ACK to ', self._state.predecessor)
            self.send(('ack', self._id), to=self._state.predecessor)
        elif (self._state.name == 'head'):
            self.evaluate(action)
            self.send(('newm', action), to=self._state.successor)
            super()._label('_st_label_313', block=False)
            id = None

            def ExistentialOpExpr_314():
                nonlocal id
                for (_, _, (_ConstantPattern330_, id)) in self._ReplicaReceivedEvent_2:
                    if (_ConstantPattern330_ == 'ack'):
                        if (id == self._state.successor):
                            return True
                return False
            _st_label_313 = 0
            while (_st_label_313 == 0):
                _st_label_313 += 1
                if ExistentialOpExpr_314():
                    _st_label_313 += 1
                else:
                    super()._label('_st_label_313', block=True)
                    _st_label_313 -= 1
            self.output('Received ACK from the successor ', self._state.successor, ' Will send the result to the client now ', self._state.client)
            self.send(('result', self._state.history[(- 1)], self._id), to=self._state.client)
        elif (self._state.name == 'tail'):
            self.evaluate(action)
            self.output('Reached the tail. Sending it back now !!')
            self.send(('ack', self._id), to=self._state.predecessor)
    _Replica_handler_217._labels = None
    _Replica_handler_217._notlabels = None

    def _Replica_handler_388(self, id, sender):
        pass
    _Replica_handler_388._labels = None
    _Replica_handler_388._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_462, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_499, sources=[PatternExpr_508], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_498])])

    def setup(self, servers, **rest_674):
        super().setup(servers=servers, **rest_674)
        self._state.servers = servers
        pass

    def run(self):
        res = 0
        self.output('sending command from client to the head of the replicas')
        self.output(self._state.servers[0])
        self.send(('newm', 'add 1 3'), to=self._state.servers[0])
        super()._label('_st_label_459', block=False)
        p = res = None

        def ExistentialOpExpr_460():
            nonlocal p, res
            for (_, _, (_ConstantPattern478_, res, p)) in self._ClientReceivedEvent_0:
                if (_ConstantPattern478_ == 'result'):
                    if (p == self._state.servers[0]):
                        return True
            return False
        _st_label_459 = 0
        while (_st_label_459 == 0):
            _st_label_459 += 1
            if ExistentialOpExpr_460():
                _st_label_459 += 1
            else:
                super()._label('_st_label_459', block=True)
                _st_label_459 -= 1
        self.output('Output received from the tail ', res)
        self.send(('Done',), to=self.parent())

    def _Client_handler_498(self, res, p, sender):
        self.output('received result ', res, ' from ', sender)
    _Client_handler_498._labels = None
    _Client_handler_498._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_656, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        num_replicas = 7
        num_clients = 1
        servers = self.new(Replica, num=num_replicas)
        clients = self.new(Client, num=num_clients)
        for s in range(0, len(servers)):
            if (s == 0):
                self._setup(list(servers)[s], (('null', list(servers)[1]), list(clients)[0], 'head'))
            elif (s == (len(servers) - 1)):
                self._setup(list(servers)[s], ((list(servers)[(s - 1)], 'null'), list(clients)[0], 'tail'))
            else:
                self._setup(list(servers)[s], ((list(servers)[(s - 1)], list(servers)[(s + 1)]), list(clients)[0], 'replica'))
        self._setup(clients, (list(servers),))
        self._start(servers)
        self.output('Servers started !!')
        self.output(servers)
        self._start(clients)
        self.output('Clients started !!')
        super()._label('_st_label_653', block=False)
        _st_label_653 = 0
        while (_st_label_653 == 0):
            _st_label_653 += 1
            if PatternExpr_661.match_iter(self._Node_ReceivedEvent_0):
                _st_label_653 += 1
            else:
                super()._label('_st_label_653', block=True)
                _st_label_653 -= 1
        self.end(servers)
