# -*- generated by 1.0.12 -*-
import da
PatternExpr_188 = da.pat.TuplePattern([da.pat.ConstantPattern('hello'), da.pat.FreePattern('greeter')])
PatternExpr_213 = da.pat.TuplePattern([da.pat.ConstantPattern('hello'), da.pat.FreePattern('s')])
PatternExpr_220 = da.pat.FreePattern('greeter')
PatternExpr_230 = da.pat.TuplePattern([da.pat.ConstantPattern('goodbye'), da.pat.FreePattern('s')])
PatternExpr_237 = da.pat.FreePattern('greeted')
_config_object = {}

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_188, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_213, sources=[PatternExpr_220], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_212]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_230, sources=[PatternExpr_237], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_229])])

    def setup(self, processes, **rest_275):
        super().setup(processes=processes, **rest_275)
        self._state.processes = processes
        pass

    def run(self):
        for p in self._state.processes:
            self.send(('hello', self._id), to=p)
        super()._label('_st_label_177', block=False)
        p1 = greeter = None

        def UniversalOpExpr_178():
            nonlocal p1, greeter
            for p1 in self._state.processes:

                def ExistentialOpExpr_186(p1):
                    nonlocal greeter
                    for (_, _, (_ConstantPattern203_, greeter)) in self._PReceivedEvent_0:
                        if (_ConstantPattern203_ == 'hello'):
                            if (p1 == greeter):
                                return True
                    return False
                if (not ExistentialOpExpr_186(p1=p1)):
                    return False
            return True
        _st_label_177 = 0
        while (_st_label_177 == 0):
            _st_label_177 += 1
            if UniversalOpExpr_178():
                _st_label_177 += 1
            else:
                super()._label('_st_label_177', block=True)
                _st_label_177 -= 1

    def _P_handler_212(self, s, greeter):
        self.output(greeter, ' says Hello too to ', self._id)
    _P_handler_212._labels = None
    _P_handler_212._notlabels = None

    def _P_handler_229(self, s, greeted):
        self.output(greeted, ' says goodbye to ', self._id)
    _P_handler_229._labels = None
    _P_handler_229._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        num_processes = 3
        ps = self.new(P, num=num_processes)
        for p in ps:
            self._setup(p, ((ps - {p}),))
        self._start(ps)
