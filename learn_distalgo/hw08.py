# -*- generated by 1.0.12 -*-
import da
PatternExpr_182 = da.pat.TuplePattern([da.pat.ConstantPattern('hello'), da.pat.FreePattern('some_id')])
PatternExpr_189 = da.pat.FreePattern('greeter')
_config_object = {}

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_182, sources=[PatternExpr_189], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_181])])

    def setup(self, processes, **rest_228):
        super().setup(processes=processes, **rest_228)
        self._state.processes = processes
        pass

    def run(self):
        for p in self._state.processes:
            self.send(('hello', self._id), to=p)
        super()._label('_st_label_177', block=False)
        _st_label_177 = 0
        while (_st_label_177 == 0):
            _st_label_177 += 1
            if False:
                _st_label_177 += 1
            else:
                super()._label('_st_label_177', block=True)
                _st_label_177 -= 1

    def _P_handler_181(self, some_id, greeter):
        self.output(greeter, ' says HELLO to ', greeter, self._id)
    _P_handler_181._labels = None
    _P_handler_181._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        num_processes = 2
        ps = self.new(P, num=num_processes)
        for p in ps:
            self._setup(p, ((ps - {p}),))
        self._start(ps)
