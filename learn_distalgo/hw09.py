# -*- generated by 1.0.12 -*-
import da
PatternExpr_188 = da.pat.TuplePattern([da.pat.ConstantPattern('hello'), da.pat.BoundPattern('_BoundPattern191_')])
PatternExpr_208 = da.pat.TuplePattern([da.pat.ConstantPattern('hello'), da.pat.FreePattern('id')])
PatternExpr_214 = da.pat.FreePattern('greeter')
PatternExpr_194 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('hello'), da.pat.BoundPattern('_BoundPattern204_')])])
_config_object = {}

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_188, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_208, sources=[PatternExpr_214], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_207])])

    def setup(self, processes, **rest_253):
        super().setup(processes=processes, **rest_253)
        self._state.processes = processes
        pass

    def run(self):
        for p in self._state.processes:
            self.send(('hello', self._id), to=p)
        greeter = self._state.processes.pop()
        super()._label('_st_label_185', block=False)
        _st_label_185 = 0
        while (_st_label_185 == 0):
            _st_label_185 += 1
            if PatternExpr_194.match_iter(self._PReceivedEvent_0, _BoundPattern204_=greeter, SELF_ID=self._id):
                _st_label_185 += 1
            else:
                super()._label('_st_label_185', block=True)
                _st_label_185 -= 1

    def _P_handler_207(self, id, greeter):
        self.output(greeter, ' says Hello to', self._id)
    _P_handler_207._labels = None
    _P_handler_207._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        num_processes = 3
        ps = self.new(P, num=num_processes)
        for p in ps:
            self._setup(p, ((ps - {p}),))
        self._start(ps)
